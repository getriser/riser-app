// tslint:disable
/**
 * riser-api
 * Awesome project developed with TypeORM.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AnnouncementResponse
 */
export interface AnnouncementResponse {
    /**
     *
     * @type {number}
     * @memberof AnnouncementResponse
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof AnnouncementResponse
     */
    title: string;
    /**
     *
     * @type {boolean}
     * @memberof AnnouncementResponse
     */
    draft: boolean;
    /**
     *
     * @type {string}
     * @memberof AnnouncementResponse
     */
    content: string;
    /**
     *
     * @type {boolean}
     * @memberof AnnouncementResponse
     */
    isRead: boolean;
    /**
     *
     * @type {number}
     * @memberof AnnouncementResponse
     */
    numberOfComments: number;
    /**
     *
     * @type {string}
     * @memberof AnnouncementResponse
     */
    createdAt: string;
    /**
     *
     * @type {Author}
     * @memberof AnnouncementResponse
     */
    author: Author;
    reactions: any[];
}
/**
 *
 * @export
 * @interface Author
 */
export interface Author {
    /**
     *
     * @type {number}
     * @memberof Author
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof Author
     */
    name: string;
}
/**
 *
 * @export
 * @interface CommentResponse
 */
export interface CommentResponse {
    /**
     *
     * @type {number}
     * @memberof CommentResponse
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof CommentResponse
     */
    content: string;
    /**
     *
     * @type {string}
     * @memberof CommentResponse
     */
    createdAt: string;
    /**
     *
     * @type {Author}
     * @memberof CommentResponse
     */
    author: Author;
}
/**
 *
 * @export
 * @interface CreateAnnouncementBodyParams
 */
export interface CreateAnnouncementBodyParams {
    /**
     *
     * @type {string}
     * @memberof CreateAnnouncementBodyParams
     */
    title: string;
    /**
     *
     * @type {string}
     * @memberof CreateAnnouncementBodyParams
     */
    content: string;
    /**
     *
     * @type {number}
     * @memberof CreateAnnouncementBodyParams
     */
    organizationId: number;
}
/**
 *
 * @export
 * @interface CreateOrganizationParams
 */
export interface CreateOrganizationParams {
    /**
     *
     * @type {string}
     * @memberof CreateOrganizationParams
     */
    name: string;
}
/**
 *
 * @export
 * @interface CreateOrganizationResponse
 */
export interface CreateOrganizationResponse {
    /**
     *
     * @type {number}
     * @memberof CreateOrganizationResponse
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof CreateOrganizationResponse
     */
    name: string;
}
/**
 *
 * @export
 * @interface InviteMemberBody
 */
export interface InviteMemberBody {
    /**
     *
     * @type {string}
     * @memberof InviteMemberBody
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof InviteMemberBody
     */
    firstName: string;
    /**
     *
     * @type {string}
     * @memberof InviteMemberBody
     */
    lastName: string;
}
/**
 *
 * @export
 * @interface LoginBody
 */
export interface LoginBody {
    /**
     *
     * @type {string}
     * @memberof LoginBody
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof LoginBody
     */
    password: string;
}
/**
 *
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     *
     * @type {string}
     * @memberof LoginResponse
     */
    token: string;
}
/**
 *
 * @export
 * @interface Member
 */
export interface Member {
    /**
     *
     * @type {number}
     * @memberof Member
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof Member
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Member
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof Member
     */
    phoneNumber: string;
    /**
     *
     * @type {string}
     * @memberof Member
     */
    birthDate: string;
    /**
     *
     * @type {string}
     * @memberof Member
     */
    pronouns: string;
    /**
     *
     * @type {string}
     * @memberof Member
     */
    imageUrl: string;
    /**
     *
     * @type {OrganizationUserRole}
     * @memberof Member
     */
    role: OrganizationUserRole;
}
/**
 *
 * @export
 * @interface OrganizationResponse
 */
export interface OrganizationResponse {
    /**
     *
     * @type {number}
     * @memberof OrganizationResponse
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof OrganizationResponse
     */
    name: string;
    /**
     *
     * @type {OrganizationUserRole}
     * @memberof OrganizationResponse
     */
    role: OrganizationUserRole;
}
/**
 *
 * @export
 * @enum {string}
 */
export enum OrganizationUserRole {
    OWNER = 'OWNER',
    MEMBER = 'MEMBER'
}

/**
 *
 * @export
 * @interface PostCommentAnnouncementParams
 */
export interface PostCommentAnnouncementParams {
    /**
     *
     * @type {string}
     * @memberof PostCommentAnnouncementParams
     */
    content: string;
}
/**
 *
 * @export
 * @interface RegisterResponse
 */
export interface RegisterResponse {
    /**
     *
     * @type {number}
     * @memberof RegisterResponse
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof RegisterResponse
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof RegisterResponse
     */
    token: string;
}
/**
 *
 * @export
 * @interface RegisterUserProperties
 */
export interface RegisterUserProperties {
    /**
     *
     * @type {string}
     * @memberof RegisterUserProperties
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof RegisterUserProperties
     */
    firstName: string;
    /**
     *
     * @type {string}
     * @memberof RegisterUserProperties
     */
    lastName: string;
    /**
     *
     * @type {string}
     * @memberof RegisterUserProperties
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof RegisterUserProperties
     */
    passwordConfirmation: string;
}
/**
 *
 * @export
 * @interface SuccessMessage
 */
export interface SuccessMessage {
    /**
     *
     * @type {string}
     * @memberof SuccessMessage
     */
    message: string;
}
/**
 *
 * @export
 * @interface UpdateAnnouncementParams
 */
export interface UpdateAnnouncementParams {
    /**
     *
     * @type {string}
     * @memberof UpdateAnnouncementParams
     */
    title: string;
    /**
     *
     * @type {string}
     * @memberof UpdateAnnouncementParams
     */
    content: string;
}

/**
 * AnnouncementControllerApi - axios parameter creator
 * @export
 */
export const AnnouncementControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateAnnouncementBodyParams} createAnnouncementBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnouncement: async (createAnnouncementBodyParams: CreateAnnouncementBodyParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAnnouncementBodyParams' is not null or undefined
            if (createAnnouncementBodyParams === null || createAnnouncementBodyParams === undefined) {
                throw new RequiredError('createAnnouncementBodyParams','Required parameter createAnnouncementBodyParams was null or undefined when calling createAnnouncement.');
            }
            const localVarPath = `/announcements`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-access-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-access-token"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createAnnouncementBodyParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createAnnouncementBodyParams !== undefined ? createAnnouncementBodyParams : {}) : (createAnnouncementBodyParams || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncement: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAnnouncement.');
            }
            const localVarPath = `/announcements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-access-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-access-token"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComments: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getComments.');
            }
            const localVarPath = `/announcements/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-access-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-access-token"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {PostCommentAnnouncementParams} postCommentAnnouncementParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postComment: async (id: number, postCommentAnnouncementParams: PostCommentAnnouncementParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postComment.');
            }
            // verify required parameter 'postCommentAnnouncementParams' is not null or undefined
            if (postCommentAnnouncementParams === null || postCommentAnnouncementParams === undefined) {
                throw new RequiredError('postCommentAnnouncementParams','Required parameter postCommentAnnouncementParams was null or undefined when calling postComment.');
            }
            const localVarPath = `/announcements/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-access-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-access-token"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof postCommentAnnouncementParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(postCommentAnnouncementParams !== undefined ? postCommentAnnouncementParams : {}) : (postCommentAnnouncementParams || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishAnnouncement: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling publishAnnouncement.');
            }
            const localVarPath = `/announcements/{id}/publish`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-access-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-access-token"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {UpdateAnnouncementParams} updateAnnouncementParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnnouncement: async (id: number, updateAnnouncementParams: UpdateAnnouncementParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateAnnouncement.');
            }
            // verify required parameter 'updateAnnouncementParams' is not null or undefined
            if (updateAnnouncementParams === null || updateAnnouncementParams === undefined) {
                throw new RequiredError('updateAnnouncementParams','Required parameter updateAnnouncementParams was null or undefined when calling updateAnnouncement.');
            }
            const localVarPath = `/announcements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-access-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-access-token"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateAnnouncementParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateAnnouncementParams !== undefined ? updateAnnouncementParams : {}) : (updateAnnouncementParams || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnouncementControllerApi - functional programming interface
 * @export
 */
export const AnnouncementControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateAnnouncementBodyParams} createAnnouncementBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnnouncement(createAnnouncementBodyParams: CreateAnnouncementBodyParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnouncementResponse>> {
            const localVarAxiosArgs = await AnnouncementControllerApiAxiosParamCreator(configuration).createAnnouncement(createAnnouncementBodyParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnouncement(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnouncementResponse>> {
            const localVarAxiosArgs = await AnnouncementControllerApiAxiosParamCreator(configuration).getAnnouncement(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComments(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommentResponse>>> {
            const localVarAxiosArgs = await AnnouncementControllerApiAxiosParamCreator(configuration).getComments(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {PostCommentAnnouncementParams} postCommentAnnouncementParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postComment(id: number, postCommentAnnouncementParams: PostCommentAnnouncementParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentResponse>> {
            const localVarAxiosArgs = await AnnouncementControllerApiAxiosParamCreator(configuration).postComment(id, postCommentAnnouncementParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishAnnouncement(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnouncementResponse>> {
            const localVarAxiosArgs = await AnnouncementControllerApiAxiosParamCreator(configuration).publishAnnouncement(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {UpdateAnnouncementParams} updateAnnouncementParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAnnouncement(id: number, updateAnnouncementParams: UpdateAnnouncementParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnouncementResponse>> {
            const localVarAxiosArgs = await AnnouncementControllerApiAxiosParamCreator(configuration).updateAnnouncement(id, updateAnnouncementParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnnouncementControllerApi - factory interface
 * @export
 */
export const AnnouncementControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {CreateAnnouncementBodyParams} createAnnouncementBodyParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnouncement(createAnnouncementBodyParams: CreateAnnouncementBodyParams, options?: any): AxiosPromise<AnnouncementResponse> {
            return AnnouncementControllerApiFp(configuration).createAnnouncement(createAnnouncementBodyParams, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncement(id: number, options?: any): AxiosPromise<AnnouncementResponse> {
            return AnnouncementControllerApiFp(configuration).getAnnouncement(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComments(id: number, options?: any): AxiosPromise<Array<CommentResponse>> {
            return AnnouncementControllerApiFp(configuration).getComments(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {PostCommentAnnouncementParams} postCommentAnnouncementParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postComment(id: number, postCommentAnnouncementParams: PostCommentAnnouncementParams, options?: any): AxiosPromise<CommentResponse> {
            return AnnouncementControllerApiFp(configuration).postComment(id, postCommentAnnouncementParams, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishAnnouncement(id: number, options?: any): AxiosPromise<AnnouncementResponse> {
            return AnnouncementControllerApiFp(configuration).publishAnnouncement(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {UpdateAnnouncementParams} updateAnnouncementParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnnouncement(id: number, updateAnnouncementParams: UpdateAnnouncementParams, options?: any): AxiosPromise<AnnouncementResponse> {
            return AnnouncementControllerApiFp(configuration).updateAnnouncement(id, updateAnnouncementParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnnouncementControllerApi - object-oriented interface
 * @export
 * @class AnnouncementControllerApi
 * @extends {BaseAPI}
 */
export class AnnouncementControllerApi extends BaseAPI {
    /**
     *
     * @param {CreateAnnouncementBodyParams} createAnnouncementBodyParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementControllerApi
     */
    public createAnnouncement(createAnnouncementBodyParams: CreateAnnouncementBodyParams, options?: any) {
        return AnnouncementControllerApiFp(this.configuration).createAnnouncement(createAnnouncementBodyParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementControllerApi
     */
    public getAnnouncement(id: number, options?: any) {
        return AnnouncementControllerApiFp(this.configuration).getAnnouncement(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementControllerApi
     */
    public getComments(id: number, options?: any) {
        return AnnouncementControllerApiFp(this.configuration).getComments(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {PostCommentAnnouncementParams} postCommentAnnouncementParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementControllerApi
     */
    public postComment(id: number, postCommentAnnouncementParams: PostCommentAnnouncementParams, options?: any) {
        return AnnouncementControllerApiFp(this.configuration).postComment(id, postCommentAnnouncementParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementControllerApi
     */
    public publishAnnouncement(id: number, options?: any) {
        return AnnouncementControllerApiFp(this.configuration).publishAnnouncement(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {UpdateAnnouncementParams} updateAnnouncementParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementControllerApi
     */
    public updateAnnouncement(id: number, updateAnnouncementParams: UpdateAnnouncementParams, options?: any) {
        return AnnouncementControllerApiFp(this.configuration).updateAnnouncement(id, updateAnnouncementParams, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {LoginBody} loginBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginBody: LoginBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginBody' is not null or undefined
            if (loginBody === null || loginBody === undefined) {
                throw new RequiredError('loginBody','Required parameter loginBody was null or undefined when calling login.');
            }
            const localVarPath = `/auth/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginBody !== undefined ? loginBody : {}) : (loginBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {LoginBody} loginBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginBody: LoginBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await AuthControllerApiAxiosParamCreator(configuration).login(loginBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {LoginBody} loginBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginBody: LoginBody, options?: any): AxiosPromise<LoginResponse> {
            return AuthControllerApiFp(configuration).login(loginBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     *
     * @param {LoginBody} loginBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(loginBody: LoginBody, options?: any) {
        return AuthControllerApiFp(this.configuration).login(loginBody, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * OrganizationControllerApi - axios parameter creator
 * @export
 */
export const OrganizationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateOrganizationParams} createOrganizationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (createOrganizationParams: CreateOrganizationParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrganizationParams' is not null or undefined
            if (createOrganizationParams === null || createOrganizationParams === undefined) {
                throw new RequiredError('createOrganizationParams','Required parameter createOrganizationParams was null or undefined when calling createOrganization.');
            }
            const localVarPath = `/organizations/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-access-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-access-token"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createOrganizationParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createOrganizationParams !== undefined ? createOrganizationParams : {}) : (createOrganizationParams || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncements: async (id: number, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAnnouncements.');
            }
            const localVarPath = `/organizations/{id}/announcements`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-access-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-access-token"] = localVarApiKeyValue;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembers: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMembers.');
            }
            const localVarPath = `/organizations/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-access-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-access-token"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/organizations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-access-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-access-token"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} id
         * @param {InviteMemberBody} inviteMemberBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMember: async (id: number, inviteMemberBody: InviteMemberBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling inviteMember.');
            }
            // verify required parameter 'inviteMemberBody' is not null or undefined
            if (inviteMemberBody === null || inviteMemberBody === undefined) {
                throw new RequiredError('inviteMemberBody','Required parameter inviteMemberBody was null or undefined when calling inviteMember.');
            }
            const localVarPath = `/organizations/{id}/members`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-access-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-access-token"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof inviteMemberBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inviteMemberBody !== undefined ? inviteMemberBody : {}) : (inviteMemberBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationControllerApi - functional programming interface
 * @export
 */
export const OrganizationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateOrganizationParams} createOrganizationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(createOrganizationParams: CreateOrganizationParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrganizationResponse>> {
            const localVarAxiosArgs = await OrganizationControllerApiAxiosParamCreator(configuration).createOrganization(createOrganizationParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnouncements(id: number, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnnouncementResponse>>> {
            const localVarAxiosArgs = await OrganizationControllerApiAxiosParamCreator(configuration).getAnnouncements(id, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembers(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Member>>> {
            const localVarAxiosArgs = await OrganizationControllerApiAxiosParamCreator(configuration).getMembers(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationResponse>>> {
            const localVarAxiosArgs = await OrganizationControllerApiAxiosParamCreator(configuration).getOrganizations(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {number} id
         * @param {InviteMemberBody} inviteMemberBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteMember(id: number, inviteMemberBody: InviteMemberBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessMessage>> {
            const localVarAxiosArgs = await OrganizationControllerApiAxiosParamCreator(configuration).inviteMember(id, inviteMemberBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganizationControllerApi - factory interface
 * @export
 */
export const OrganizationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {CreateOrganizationParams} createOrganizationParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization(createOrganizationParams: CreateOrganizationParams, options?: any): AxiosPromise<CreateOrganizationResponse> {
            return OrganizationControllerApiFp(configuration).createOrganization(createOrganizationParams, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncements(id: number, offset?: number, limit?: number, options?: any): AxiosPromise<Array<AnnouncementResponse>> {
            return OrganizationControllerApiFp(configuration).getAnnouncements(id, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembers(id: number, options?: any): AxiosPromise<Array<Member>> {
            return OrganizationControllerApiFp(configuration).getMembers(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations(options?: any): AxiosPromise<Array<OrganizationResponse>> {
            return OrganizationControllerApiFp(configuration).getOrganizations(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} id
         * @param {InviteMemberBody} inviteMemberBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMember(id: number, inviteMemberBody: InviteMemberBody, options?: any): AxiosPromise<SuccessMessage> {
            return OrganizationControllerApiFp(configuration).inviteMember(id, inviteMemberBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationControllerApi - object-oriented interface
 * @export
 * @class OrganizationControllerApi
 * @extends {BaseAPI}
 */
export class OrganizationControllerApi extends BaseAPI {
    /**
     *
     * @param {CreateOrganizationParams} createOrganizationParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public createOrganization(createOrganizationParams: CreateOrganizationParams, options?: any) {
        return OrganizationControllerApiFp(this.configuration).createOrganization(createOrganizationParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getAnnouncements(id: number, offset?: number, limit?: number, options?: any) {
        return OrganizationControllerApiFp(this.configuration).getAnnouncements(id, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getMembers(id: number, options?: any) {
        return OrganizationControllerApiFp(this.configuration).getMembers(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getOrganizations(options?: any) {
        return OrganizationControllerApiFp(this.configuration).getOrganizations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} id
     * @param {InviteMemberBody} inviteMemberBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public inviteMember(id: number, inviteMemberBody: InviteMemberBody, options?: any) {
        return OrganizationControllerApiFp(this.configuration).inviteMember(id, inviteMemberBody, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {RegisterUserProperties} registerUserProperties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registerUserProperties: RegisterUserProperties, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerUserProperties' is not null or undefined
            if (registerUserProperties === null || registerUserProperties === undefined) {
                throw new RequiredError('registerUserProperties','Required parameter registerUserProperties was null or undefined when calling register.');
            }
            const localVarPath = `/users/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof registerUserProperties !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registerUserProperties !== undefined ? registerUserProperties : {}) : (registerUserProperties || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {RegisterUserProperties} registerUserProperties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registerUserProperties: RegisterUserProperties, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterResponse>> {
            const localVarAxiosArgs = await UserControllerApiAxiosParamCreator(configuration).register(registerUserProperties, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {RegisterUserProperties} registerUserProperties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registerUserProperties: RegisterUserProperties, options?: any): AxiosPromise<RegisterResponse> {
            return UserControllerApiFp(configuration).register(registerUserProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     *
     * @param {RegisterUserProperties} registerUserProperties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public register(registerUserProperties: RegisterUserProperties, options?: any) {
        return UserControllerApiFp(this.configuration).register(registerUserProperties, options).then((request) => request(this.axios, this.basePath));
    }

}


